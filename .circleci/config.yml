version: 2.1

commands:
  check-aries-controller-version:
    description: Check if there is an update to the version of aries-controller. If there is, set the NEW_VERSION env var.
    steps:
      - run:
          name: Check if version of aries-controller is updated
          command: |
            source scripts/check_aries_controller_version.sh
            if [ $VERSION_IS_UPDATED = false ] ; then
              echo 'Version is not updated.'
              circleci-agent step halt
            else
              echo 'Version is updated.'
              cat scripts/check_aries_controller_version.sh >> $BASH_ENV
            fi

jobs:
  build-and-test:
    executor:
      name: node/default
      tag: '14.15.1'
    steps:
      - checkout
      - run: npm install
      - run: npm run build
      - run: npm run lint
      - run: npm run test:local

  integration-test:
    machine:
      docker_layer_caching: true
      image: ubuntu-1604:201903-01
    steps:
      - checkout
      - run:
          name: setup shell environment
          command: |
            touch .env
            echo ' [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"' >> $BASH_ENV
      - run:
          name: node npm setup
          command: |
              nvm install v14.15.1
              nvm alias default v14.15.1
              npm install
      - run:
          name: setup docker environments
          command: |
            docker pull bcgovimages/aries-cloudagent:py36-1.16-1_0.7.1
      - run:
          name: Start docker compose and wait for readiness
          command: |
            docker-compose -f docker-compose.dep.yml build
            docker-compose -f docker-compose.dep.yml up -d
            sleep 40
            docker-compose up -d
            sleep 70
      - run:
          name: Run tests
          command: |
            if ! npm run test:integration ; then
              echo "Tests failed. Server logs:";
              docker-compose -f docker-compose.dep.yml logs
              docker-compose logs;
              exit 1;
            fi

  protocol-integration-tests:
    machine:
      image: ubuntu-1604:201903-01
    steps:
      - run:
          name: Pull protocol-integration-tests
          command: git clone https://github.com/kiva/protocol-integration-tests ./
      - run:
          name: Setup environment
          command: |
            ./scripts/setup_env.sh
            echo $AUTH0_ENV | base64 --decode >> .env
            echo ' [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"' >> $BASH_ENV
      - run:
          name: Node npm setup
          command: |
            nvm install v14.15.1
            node -v
            nvm alias default v14.15.1
      - run:
          name: Get ACAPy
          command: docker pull bcgovimages/aries-cloudagent:py36-1.16-1_0.7.1
      - run:
          name: Override for gateway image
          command: ./scripts/setup_override.sh -r aries-controller -s demo-controller -f docker-compose.demo.yml
      - run:
          name: Start docker compose and wait for readiness
          command: |
            docker system prune -f
            docker-compose -f docker-compose.yml build --no-cache
            docker-compose -f docker-compose.yml up -d
            sleep 20
            docker-compose -f docker-compose.yml logs
      - run:
          name: Healthcheck services
          command: ./scripts/healthstack.sh
      - run:
          name: Setup integration tests
          command: |
            npm install
            ./scripts/setup_fixtures.sh
      - run:
          name: Running integration tests
          command: |
            if ! npm run test ; then
              echo "Tests failed. Server logs:";
              docker-compose -f docker-compose.yml logs;
              exit 1;
            fi

  publish-packages-and-push-to-dev:
    machine:
      image: ubuntu-1604:201903-01
    steps:
      - checkout
      - run:
          name: Node npm setup
          command: |
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
            nvm install v14.15.1
            node -v
            nvm alias default v14.15.1
#      - check-aries-controller-version
      - docker/check
      - docker/build:
          dockerfile: Dockerfile.production
          image: kivaprotocol/aries-controller
          tag: $NEW_VERSION,latest
      - run:
          name: Install npm dependencies for aries-controller
          command: npm install
      - run:
          name: Build aries-controller
          command: npm run build
#      - run:
#          name: Publish built aries-controller package to npm registry
#          command: ./scripts/publish.sh $NEW_VERSION
#      - docker/push:
#          image: kivaprotocol/aries-controller
#          tag: $NEW_VERSION,latest
#      - docker/update-description:
#          image: kivaprotocol/aries-controller
#      - kube-orb/install
      - kube-orb/install-kubeconfig:
          kubeconfig: KUBECONFIG_BASE64
      - aws-eks/install-aws-iam-authenticator
      - helm/install-helm-client:
          version: v3.2.4
#      - run:
#          name: Deploy service to dev cloud
#          command: helm upgrade --install demo-controller helm-config --set image.tag=$NEW_VERSION

workflows:
  build-test-publish:
    jobs:
      - build-and-test:
          filters: # run for all branches AND tags
            tags:
              only: /.*/
      - integration-test:
          requires:
            - build-and-test
          filters: # run for all branches AND tags
            tags:
              only: /.*/
      - protocol-integration-tests:
          context:
            - integration-test-context
          requires:
            - build-and-test
          filters: # only run for semver tagged versions
            branches:
              only: main
      - publish-packages-and-push-to-dev:
          context:
            - continuous-deployment-dev
#          requires:
#            - integration-test
#            - protocol-integration-tests
          filters: # only run on main
            tags:
              only: /.*/
#            branches:
#              only: main

orbs:
  node: circleci/node@1.1.6
  docker: circleci/docker@2.1.0
  kube-orb: circleci/kubernetes@0.11.1
  aws-eks: circleci/aws-eks@1.0.1
  helm: circleci/helm@1.2.0
